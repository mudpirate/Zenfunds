Getting Started

Install Next.js:
bashnpx create-next-app@latest
# Or if the folder already exists:
npx create-next-app@latest .
Then run the development server:
bashnpm run dev

Initial Setup:

page.tsx is your homepage
Install useful extensions like Prisma and Tailwind CSS IntelliSense
Set up Git and push commits using Cursor's GitHub sidebar integration

Database Setup with Prisma and Neon

Create Neon Project:

Make a new project in Neon
Get the connection string and add it to your .env file
Add node_modules and .env to .gitignore

Install and Configure Prisma:
bash# Install Prisma as a dev dependency
npm i -D prisma

# Initialize Prisma
npx prisma init
This creates an .env file and a folder for models in your root directory. Remove the output field in the generator client as it can cause problems.
Create Models:
In this app, I create a User model for authentication and a Record model for storing data:
prismamodel User {
  id String @id @default(cuid())
  // other fields
  @@index([userId]) // For faster filtering like where {userId: "user_123"}
}
Generate and Migrate:
bashnpx prisma generate
npx prisma migrate dev  # Pushes tables to Neon
Create db.ts to make a single Prisma client instance.
Clerk Authentication
Setup Clerk:

Sign in to Clerk and create an application
Name your application and choose Next.js as your framework
Install the required packages using the provided commands
Create middleware.ts in your root directory
Wrap your app with ClerkProvider in layout.tsx
Create sign-in and sign-up pages
Add environment variables for routes
When users sign in, their data syncs with your Neon database

Navigation Components
Create Navbar:

Make it a client component with Clerk's UserButton
Add styling and responsive design
Hide the navbar from certain layouts (like dashboard) using the usePathname hook
Convert to client-side layout when needed

Dashboard Layout:
Create dashboard pages with a layout that includes a sidebar.
CSS Styling Tips
For consistent layouts:

Use max-w-7xl on the outer container
Give it w-full (full viewport width)
Add px-10 for padding
Create an inner div with w-full

Page Components
Home Page:

Create a hero section with two buttons: "Dashboard" and "AI Assistant"
Render using a client component
Mix server and client components as needed
Use Clerk's useUser hook to destructure isSignedIn
On button click, if the user is signed in, use router.push() to navigate (similar to React's navigate)

Dashboard Pages:

Create a layout with a sidebar
Remove the navbar from dashboard pages using usePathname() to get the current route
Check if hiddenRoutes includes the current pathname to conditionally hide components

add transaction
we need to make a client component with all form inpur and send it to the server action by imorting them and formdata is a object and add errors and catch  and in addexpense server action we need to import the formd ata nad parse it to type using ts and then use try catch and send the data to the db using queries then return it through a object and use it in client component of dashboard